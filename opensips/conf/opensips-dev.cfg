#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      https://opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#

####### Global Parameters #########

/* uncomment the following lines to enable debugging */
# debug_mode=yes

log_level=4
xlog_level=4
log_stderror=yes
log_facility=LOG_LOCAL0

udp_workers=4
tcp_workers=4

exec_msg_threshold=200

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes


# socket=udp:127.0.0.1:5060   # CUSTOMIZE ME
# socket=udp:*:5060
socket=udp:osips:5060
socket=ws:osips:5066  # 支持ws协议
# socket=ws:*:5066
# socket=$SOCKET_UDP_HOST_IPP # 替换为容器的主机地址
# socket=$SOCKET_WS_HOST_IPP  # 支持ws协议

open_files_limit = 65535

####### Modules Section ########

#set module path
mpath="/usr/local/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### 数据库
loadmodule "db_mysql.so"

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", "NAT")
# modparam("usrloc", "working_mode_preset", "single-instance-no-db")
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-through")
modparam("usrloc", "db_url", "mysql://root:123456@mariadb:3306/opensips")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
/* uncomment the next line not to allow more than 10 contacts per AOR */
modparam("registrar", "max_contacts", 1)
modparam("registrar", "received_avp", "$avp(received)")

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)

loadmodule "proto_udp.so"
loadmodule "proto_ws.so" # 支持ws协议

modparam("proto_ws", "require_origin", no) # 关闭，否则会报错

loadmodule "nathelper.so"
modparam("nathelper", "received_avp", "$avp(received)")

loadmodule "auth.so"

#### Json module
loadmodule "json.so"
#### rest_client module
loadmodule "rest_client.so"

####### Routing Logic ########

# main request routing logic

route{
	if (!mf_process_maxfwd_header(10)) {
		send_reply(483,"Too Many Hops");
		exit;
	}
  # ???
	if (has_totag()) {
		# handle hop-by-hop ACK (no routing required)
		if ( is_method("ACK") && t_check_trans() ) {
			t_relay();
			exit;
		}

		# sequential request within a dialog should
		# take the path determined by record-routing
		if ( !loose_route() ) {
			# we do record-routing for all our traffic, so we should not
			# receive any sequential requests without Route hdr.
			send_reply(404,"Not here");
			exit;
		}

		if (is_method("BYE")) {
			# do accounting even if the transaction fails
			do_accounting("log","failed");
		}

		# route it out to whatever destination was set by loose_route()
		# in $du (destination URI).
		route(relay);
		exit;
	}

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans())
			t_relay();
		exit;
	}

	# absorb retransmissions, but do not create transaction
	# t_check_trans(); # ？？？

	if ( !(is_method("REGISTER")  ) ) {
		
		if (is_myself("$fd")) {
					
		} else {
			# if caller is not local, then called number must be local
			if (!is_myself("$rd")) {
				send_reply(403,"Relay Forbidden");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
			"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			send_reply(403,"Preload Route denied");
		exit;
	}
	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
		do_accounting("log");
	}

  # domain in request's URI
  # 请求的地址不是本服务
  # 添加P-hint头
	if (!is_myself("$rd")) {
		append_hf("P-hint: outbound\r\n"); 
    xlog("L_DBG", "请求的地址不是本服务\n");
		route(relay);
	}

	# requests for my domain
	if (is_method("PUBLISH|SUBSCRIBE")) {
		send_reply(503, "Service Unavailable");
		exit;
	}

  # 修改contact头，似乎不是必须的，如果用了fix_nated_register，不修改也可以成功转发消息
  fix_nated_contact();

	if (is_method("REGISTER")) {
    if ($(hdr(X-SKIP-AUTH){s.len}) > 0) {
      # 跳过认证
      xlog("L_DBG", "跳过认证\n");
      route(AUTH_TEST);
    } else {
      # 执行认证
		  route(AUTH);
    }
  }

  # 处理收到的消息请求
  if (is_method("MESSAGE")) {
    $var(fs) = 'FreeSWITCH';
    if ( $(ua{s.index, $var(fs)}) == 0 ) {
      xlog("L_DBG", "收到FS发送消息请求，转发到客户端\n");
      
      $var(contributionId) = $hdr(X-Contribution-ID);
      $var(conversationId) = $hdr(X-Conversation-ID);

      if($(var(contributionId){s.len}) > 0){
        remove_hf("X-Contribution-ID");
        append_hf("Contribution-ID: $var(contributionId)\r\n");
      }
      if($(var(conversationId){s.len}) > 0){
        remove_hf("X-Conversation-ID");
        append_hf("Conversation-ID: $var(conversationId)\r\n");
      }
      if (lookup("location")) {
        xlog("L_DBG", "消息接收用户[$rU]在线，转发消息\n");
        t_relay();
      } else {
        xlog("L_DBG", "[$rU]不在线\n");
        sl_send_reply(202, "Accepted");
      }
    } else {
      xlog("L_DBG", "收到客户端发送消息请求[$mb]，转发到FS\n");
      $var(contributionId) = $hdr(Contribution-ID);
      $var(conversationId) = $hdr(Conversation-ID);

      # FS的chatplan(mod_sms)对于自定义头域需以"X-"或"P-"开头才可解析，所以此处增加
      # 一份可解析的副本(X-开头)
      if($(var(contributionId){s.len}) > 0){
        append_hf("X-Contribution-ID: $var(contributionId)\r\n");
        remove_hf("Contribution-ID");
      }
      if($(var(conversationId){s.len}) > 0){
        append_hf("X-Conversation-ID: $var(conversationId)\r\n");
        remove_hf("Conversation-ID");
      }
			forward("$FS_DU");
    }
    exit;
  }

	if ($rU==NULL) {
		# request with no Username in RURI
		send_reply(484,"Address Incomplete");
		exit;
	}

	# do lookup with method filtering
	if (!lookup("location","m")) {
		t_reply(404, "Not Found");
		exit;
	}

	# when routing via usrloc, log the missed calls also
	do_accounting("log","missed");
	route(relay);
}


route[relay] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		t_on_branch("per_branch_ops");
		t_on_reply("handle_nat");
		t_on_failure("missed_call");
	}

	if (!t_relay()) {
		send_reply(500,"Internal Error");
	}
	exit;
}




branch_route[per_branch_ops] {
	xlog("new branch at $ru\n");
}


# onreply_route {
#   xlog("L_DBG", "OpenSIPS received a reply from $si\n");
# }

onreply_route[handle_nat] {
	xlog("incoming reply\n");
}


failure_route[missed_call] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply(404,"Not found");
	##	exit;
	##}
}

route[AUTH]{
	xlog("L_DBG", "收到[$fU][$socket_in(proto)][$si][$sp]注册（REGISTER）请求\n");

  # 进行用户认证
  xlog("L_DBG","Authorization头中包含的响应字段 $auth.resp\n");
  if ($auth.resp) {
    # 自定义验证方法
    xlog("L_DBG", ">>>DBG Rigister with auth.resp[$auth.resp]\n");

    # Check response
    # 根据response调用UDM接口获取到用户信息并与注册信息中的用户名比较
    # 若相等则允许注册否则回应4xx
    $var(url_path)="$OAUTH_URL";
    $var(url)=$var(url_path)+"?access_token="+$auth.resp;
    xlog("L_DBG", ">>>DBG url=[$var(url)]\n");

    $var(ret) = rest_get($var(url), $var(rsp), $var(ct), $var(rcode));

    xlog("L_DBG", ">>>DBG $var(ret)=[$var(ret)]\n");
    xlog("L_DBG", ">>>DBG $var(rsp)=[$var(rsp)]\n");
    xlog("L_DBG", ">>>DBG $var(rcode)=[$var(rcode)]\n");
    xlog("L_DBG", ">>>DBG auth-name = [$au]\n");

    $json(ret_json) := $var(rsp);
    $var(rc)=$json(ret_json/code);
    if ($var(rc) == 0) {
      if ($json(ret_json/result/data/account) == $au) {
        xlog("L_DBG", ">>>DBG: You got it!\n");
      } else {
        xlog("L_WARN", ">>>Warning: Wrong Username,so i'am sorry\n");
                send_reply(403, "Forbidden");
                exit;
      }
    } else {
      send_reply(404, "Not found");
      exit;
    }
  } else {
    # 发起挑战
    www_challenge("osip", "auth");
    exit;
  }

  # 用当前请求中的信息替换contact中的内容，记录在用户数据中
  fix_nated_register();
  # store the registration and generate a SIP reply
  #		$var(pA) = is_ip_registered("location", $tu, $si);
  #		if($var(pA) < 0){
  #			xlog("L_DBG", ">>>DBG: SIP contact ct:[$ct] [$fu] ci:[$ci] did not register on, then check registe status for fU:[$fU]\n");
  #
  #			if(is_registered("location")){
  #				xlog("L_WARN", ">>>WARN: Forbid $ct to registe on, caused by: exist another $fU has registed\n");
  #				send_reply(403, "Occupied");
  #				exit;
  #			}
  #		}else{
  #			xlog("L_DBG", ">>>DBG: Will call save() to registe\n");
  #		}

  if (is_registered("location")) {
    xlog("L_DBG", ">>>DBG: This aor[$ct] is registered\n");

    #update<---remove and add
    remove("location", $tu);
  } else {
    xlog("L_DBG", ">>>DBG: Will call save() to registe\n");
  }

  if (!save("location")) {
    xlog("failed to register AoR $tu\n");
  } else {
    xlog("L_DBG", ">>>DBG: Successed to save aor to location\n");
  }

	exit;
}

route[AUTH_TEST]{
  xlog("L_DBG", ">>>DBG: BLock AUTH_TEST \n");

  # 用当前请求中的信息替换contact中的内容，记录在用户数据中
  fix_nated_register();
  # store the registration and generate a SIP reply
  #		$var(pA) = is_ip_registered("location", $tu, $si);
  #		if($var(pA) < 0){
  #			xlog("L_DBG", ">>>DBG: SIP contact ct:[$ct] [$fu] ci:[$ci] did not register on, then check registe status for fU:[$fU]\n");
  #
  #			if(is_registered("location")){
  #				xlog("L_WARN", ">>>WARN: Forbid $ct to registe on, caused by: exist another $fU has registed\n");
  #				send_reply(403, "Occupied");
  #				exit;
  #			}
  #		}else{
  #			xlog("L_DBG", ">>>DBG: Will call save() to registe\n");
  #		}

  if (is_registered("location")){
    xlog("L_DBG", ">>>DBG: This aor[$ct] is registered\n");

    #update<---remove and add
    remove("location", $tu);
  } else {
    xlog("L_DBG", ">>>DBG: Will call save() to registe\n");
  }

  if (!save("location")){
    xlog("failed to register AoR $tu\n");
  } else {
    xlog("L_DBG", ">>>DBG: Successed to save aor to location\n");
  }

  exit;
}
