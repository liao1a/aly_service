user root root;
worker_processes auto;

error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;
worker_rlimit_nofile 51200;

events {
	use epoll;
	worker_connections 51200;
	multi_accept on;
}

http {
	include mime.types;
	default_type application/octet-stream;
	server_names_hash_bucket_size 128;
	client_header_buffer_size 32k;
	large_client_header_buffers 4 32k;
	client_max_body_size 1024m;
	client_body_buffer_size 10m;
	sendfile on;
	tcp_nopush on;
	# keepalive_timeout 120;
	server_tokens off;
	tcp_nodelay on;

	fastcgi_connect_timeout 300;
	fastcgi_send_timeout 300;
	fastcgi_read_timeout 300;
	fastcgi_buffer_size 64k;
	fastcgi_buffers 4 64k;
	fastcgi_busy_buffers_size 128k;
	fastcgi_temp_file_write_size 128k;
	fastcgi_intercept_errors on;

	# 定义连接基数区域，10m 可以储存 320000 个并发会话
	limit_conn_zone $remote_addr zone=connip:10m;
	# #是限制每个IP只能发起8000个并发连接
	limit_conn connip 8000;
	# 指定当触发limit的时候日志打印级别
	limit_conn_log_level error;
	# 回复被禁用的连接请求时的状态码
	limit_conn_status 488;
	# 达到阀值后开始限速(字节)
	limit_rate_after 300m;
	# 限制向客户端传输数据的速度(Byte/s)
	limit_rate 300k;

	# 指定等待client发送一个包体的超时时间
	client_body_timeout 60s;
	# 指定等待client发送一个包头的超时时间
	client_header_timeout 60s;
	# keep-alive连接超时时间
	keepalive_timeout 75s;
	# 服务端向客户端传输数据的超时时间
	send_timeout 60s;

	# 发生错误时返回指定错误页
	# error_page 400 404 413 /40x.html;
	# error_page 500 502 503 504 /50.html;


#Gzip Compression
	gzip on;
	gzip_buffers 16 8k;
	gzip_comp_level 6;
	gzip_http_version 1.1;
	gzip_min_length 256;
	gzip_proxied any;
	gzip_vary on;
	gzip_types
		text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml
		text/javascript application/javascript application/x-javascript
		text/x-json application/json application/x-web-app-manifest+json
		text/css text/plain text/x-component
		font/opentype application/x-font-ttf application/vnd.ms-fontobject
		image/x-icon;
	gzip_disable "MSIE [1-6]\.(?!.*SV1)";

#If you have a lot of static files to serve through Nginx then caching of the files' metadata (not the actual files' contents) can save some latency.
	open_file_cache max=1000 inactive=20s;
	open_file_cache_valid 30s;
	open_file_cache_min_uses 2;
	open_file_cache_errors on;

	server {
		listen 80;
		server_name _;
		access_log /var/log/nginx/access.log combined;
		root /usr/share/nginx/html;
		index index.html index.htm index.php;
		#error_page 404 /404.html;
		#error_page 502 /502.html;
		location /nginx_status {
			stub_status on;
			access_log off;
			allow 127.0.0.1;
			deny all;
		}



		location / {
				index index.html;
				try_files $uri $uri/ /index.html;
				add_header Cache-Control no-store;

				# set $is_pass false;   #设置一个初始值
				# if ($http_user_agent ~ "(([a-zA-Z0-9]|,|.|\s|;|\(|\)|/){50,})") {
				# 	set $is_pass true;
				# }
        # if ($is_pass = false) {
        #     return 403;
				# }
		}
		location /oauth {
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header Host $http_host;
			proxy_set_header X-NginX-Proxy true;
			proxy_pass http://host.docker.internal:3330/oauth;
		}
		location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico|html)$ {
			# expires 30d;
			add_header Cache-Control no-store;
			access_log off;
		}
		location ~ .*\.(js|css)?$ {
			expires 7d;
			access_log off;
		}
		location ~ /\.ht {
			deny all;
		}
		location ~* \.md$ {
			deny all;
		}
	}
}
